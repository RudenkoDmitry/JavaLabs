package org.example;

public interface ArrayListAbstract <T> {
    /**
     * Метод для возврата значения контейнера по индексу
     * @param index Индекс значения которое необходимо получить
     * @return Возвращает значения располагающееся по переданному индексу
     */
    Object get(int index);

    /**
     * Метод для задания значения контейнера по индексу
     * @param index Индекс контейнера которому присваивается значение
     * @param data Значение, присваивающееся по переданному индексу
     */
    void set(int index, T data);

    /**
     * Метод для Добавления нового элемента в конец контейнера
     * @param data Значение добавляемого элемента
     */
    void pushback(T data);

    /**
     * Метод для добавление нового элемента по определённому индексу в контейнер
     * @param index Индекс добавления элемента
     * @param data Значение добавляемого элемента
     */
    void add(int index, T data);

    /**
     * Метод для удаления переданного значения в контейнере
     * @param data Значение удаляемого элемента
     * @return Возвращает true если элемент удалён и false если удаление не удалось
     */
    boolean remove(T data);

    /**
     * Метод для удаления значения из контейнера по переданному индексу
     * @param index Индекс удаляемого элемента
     */
    void removeFromIndex(int index);

    /**
     * Метод для определения текущего размера контейнера
     * @return Возвращает количество элементов в контейнере
     */
    int size();

    /**
     * Метод для определения пустоты контейнера
     * @return Возвращает true если в контейнере нет элементов и false если они есть
     */
    boolean isEmpty();

    /**
     * Метод для определения индекса переданного значения контейнера
     * @param data Значение элемента контейнера, индекс которого необходимо получить
     * @return Возвращает первый индекс переданного параметра в контейнере, если значение не найдено возвращает -1
     */
    int getIndex(T data);

    /**
     * Метод для очистки данных контейнера
     */
    void clear();

    /**
     * Метод для проверки нахождения элемента в контейнере
     * @param data Значение для которого необходимо проверить нахождение в контейнере
     * @return Возвращает true если элемент располаается в контейнере и false если такого элемента нет
     */
    boolean contains(T data);

    /**
     * Метод для преобразования объекта в массив
     * @return Возвращает массив типа Object
     */
    Object[] toArray();

}

